<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.CartMapper">

	<!-- Result Map -->
	<resultMap id="BaseResultMap" type="com.model.CartModel">	<!--实体类全类名 -->
		<result column="id" property="id" />
		<result column="account" property="account" />  	<!--映射关系 数据库表中的名 后面是实体类中的属性名 -->
		<result column="code" property="code" />
		<result column="amount" property="amount" />
	</resultMap>

	<!-- table all fields   sql片段 -->
	<sql id="Base_Column_List">
		account,code,amount
	</sql>

	<!-- 查询条件 -->
	<sql id="Example_Where_Clause">
		where 1=1
			<if test="id != null ">
				and id = #{id}
			</if>
			<if test="account != null and account != ''">
				and account like #{account}
			</if>
			<if test="code != null and code != ''">
				and code = #{code}
			</if>
			<if test="amount != null and amount != ''">
				and amount = #{amount}
			</if>
	</sql>

	<!-- 插入记录 -->
	<!--selectKey  会将 SELECT LAST_INSERT_ID()的结果放入到传入的model的主键里面，  
        keyProperty 对应的model中的主键的属性名，这里是 user 中的id，因为它跟数据库的主键对应  
        order AFTER 表示 SELECT LAST_INSERT_ID() 在insert执行之后执行,多用与自增主键，  
              BEFORE 表示 SELECT LAST_INSERT_ID() 在insert执行之前执行，这样的话就拿不到主键了，  
                    这种适合那种主键不是自增的类型  
        resultType 主键类型 -->  
	<insert id="insert" parameterType="Object">
<!-- 		<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id"> -->
<!-- 			SELECT LAST_INSERT_ID() -->
<!-- 		</selectKey> -->
		insert into shop.cart(account,code,amount)
		values(#{account}, #{code}, #{amount})
	</insert>
	
	<!-- 删除记录 -->
	<delete id="delete" parameterType="Object">
		delete from shop.cart where id = #{id}
	</delete>
	
	<delete id="deleteModel" parameterType="Object">
		delete from shop.cart 
		<include refid="Example_Where_Clause" />
	</delete>

	<!-- 根据，修改记录 -->
	<update id="update" parameterType="Object">
		update shop.cart set
		amount = #{amount} 
		where id = #{id}
	</update>
	<update id="update2" parameterType="Object">
     update shop.cart set
		amount = #{amount} 
		where code = #{code}
	</update>

	<!-- 修改记录，只修改只不为空的字段 -->
<!-- 	<update id="updateActive" parameterType="Object"> -->
<!-- 		update shop.cart set -->
<!-- 		<trim suffixOverrides=","> -->
<!-- 			<if test="code != null and code != '' "> -->
<!-- 				code = #{code}, -->
<!-- 			</if> -->
<!-- 			<if test="parentaccount != null and parentaccount != '' "> -->
<!-- 				parentaccount = #{parentaccount}, -->
<!-- 			</if> -->
<!-- 		</trim> -->
<!-- 		where account = #{account} -->
<!-- 	</update> -->

	<!-- 根据查询 系统用户 -->
	<select id="selectId" resultMap="BaseResultMap" parameterType="Object">
	
	</select>

	<!-- 系统用户 列表总数 -->
	<select id="selectCount" resultType="java.lang.Integer" parameterType="Object">
		select count(1) from shop.cart
		<include refid="Example_Where_Clause" />
	</select>

	<!-- 查询系统用户列表 -->
	<select id="selectModel" resultMap="BaseResultMap" parameterType="Object">
		select <include refid="Base_Column_List" />
		from shop.cart
		<include refid="Example_Where_Clause" />
<!-- 		<if test="pager.orderCondition != null and pager.orderCondition != ''"> -->
<!-- 			${pager.orderCondition} -->
<!-- 		</if> -->
<!-- 		<if test="pager.mysqlQueryCondition != null and pager.mysqlQueryCondition != ''"> -->
<!-- 			${pager.mysqlQueryCondition} -->
<!-- 		</if> -->
	</select>
	
	<!-- 查询系统用户列表 -->
	<select id="selectAll" resultMap="BaseResultMap" parameterType="Object">
        select (select url from shop.productpic a where a.code=b.code and a.type="1")url,(select name from shop.product c where c.code=b.code)name,(select price from shop.product c where c.code=b.code)price,account,code,amount,id from shop.cart b <include refid="Example_Where_Clause" />
	</select>

</mapper>   